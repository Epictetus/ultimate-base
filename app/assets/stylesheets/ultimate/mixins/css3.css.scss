// Use compatibility tables from http://caniuse.com/
// http://css3pie.com/documentation/supported-css3-features/#pie-watch-ancestors
// http://css3pie.com/documentation/supported-css3-features/#pie-lazy-init
// TODO use !default http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#variable_defaults_

$support-ie: true !default;
$pie-url: asset-url("polyfills/PIE.htc", '') !default;
$boxsizing-url: asset-url("polyfills/boxsizing.htc", '') !default;

@mixin pie($poll: none, $watch-ancestors: 0) {
  @if $support-ie and $pie-url {
    behavior: $pie-url;
    // http://css3pie.com/documentation/supported-css3-features/#pie-poll
    @if $poll != none {
      -pie-poll: $poll;
    }
    // http://css3pie.com/documentation/supported-css3-features/#pie-watch-ancestors
    @if $watch-ancestors > 0 {
      -pie-watch-ancestors: $watch-ancestors;
    }
  }
}

@import "ultimate/mixins/vendors";
@import "ultimate/mixins/routines";

//  Round all corners by a specific amount.
//    example:
//      @include border-radius(5px 5px 0 0);
//    produce:
//      -webkit-border-radius: 5px 5px 0 0; // iOS-Safari <= 3.2, Android <= 2.1
//              border-radius: 5px 5px 0 0;
@mixin border-radius($params) {
  @include vendors(webkit, border-radius, $params);
}

//  Round mentioned corners by a specific amounts without muted corners by none or false.
//    example:
//      @include border-radius__complex(5px 7px none);
//    produce:
//      -webkit-border-top-left-radius: 5px; // iOS-Safari <= 3.2, Android <= 2.1
//              border-top-left-radius: 5px;
//      -webkit-border-top-right-radius: 7px; // iOS-Safari <= 3.2, Android <= 2.1
//              border-top-right-radius: 7px;
//      -webkit-border-bottom-left-radius: 7px; // iOS-Safari <= 3.2, Android <= 2.1
//              border-bottom-left-radius: 7px;
@mixin border-radius_complex($params) {
  @if isset($params) {
    $l: length($params);
    @if $l == 1 or complex-isset($params) {
      @include border-radius($params);
    } @else {
      @if $l < 4 {
        $params: complex-list($params);
      }
      $i: 0;
      @each $corner in top-left, top-right, bottom-right, bottom-left {
        $i: $i + 1;
        $p: nth($params, $i);
        @if isset($p) {
          @include vendors(webkit, border-#{$corner}-radius, $p);
        }
      }
    }
  }
}

//  Provide CSS3 box-shadow property.
//    example:
//      @include box-shadow(#00F -10px 0 10px, #F00 10px 0 10px);
//    produce:
//      -webkit-box-shadow: #00F -10px 0 10px, #F00 10px 0 10px; // Safari 5.0, iOS-Safari <= 4.3, Android <= 4.0      missing "inset" and blur radius value support for iOS-Safari <= 3.2, Android <= 3.0
//              box-shadow: #00F -10px 0 10px, #F00 10px 0 10px;
@mixin box-shadow($shadow0, $shadow1: false) {
  $shadows: $shadow0;
  @if $shadow1 {
    $shadows: "#{$shadows}, #{$shadow1}";
  }
  @include vendors(webkit, box-shadow, unquote($shadows));
}

//  Change the box model of element.
//    example:
//      @include box-sizing;
//    produce:
//      -webkit-box-sizing: border-box; // Safari <= 5.0, iOS-Safari <= 4.3, Android <= 3.0
//         -moz-box-sizing: border-box; // actual
//              box-sizing: border-box; //
//      *behavior: url("/assets/polyfills/boxsizing.htc"); // IE 6-7
@mixin box-sizing($params: border-box) {
  @include vendors(webkit moz, box-sizing, $params);
  @if $support-ie and $boxsizing-url {
    // https://github.com/Schepp/box-sizing-polyfill
    *behavior: $boxsizing-url; // IE 6-7
  }
}

// !!! EXPERIMENTAL !!!
// @include linear-gradient(white, $c-black, left)
@mixin linear-gradient($color_start, $color_stop, $start: top, $color_middle: none, $percent_middle: 50%) {
  // TODO: colors as list argument
  $wk_start: left top;
  $wk_stop: left bottom;
  @if $start == top {
    $wk_start: left top;
    $wk_stop: left bottom;
  } @else if $start == bottom {
    $wk_start: left bottom;
    $wk_stop: left top;
  } @else if $start == left {
    $wk_start: left top;
    $wk_stop: right top;
  } @else if $start == right {
    $wk_start: right top;
    $wk_stop: left top;
  }
  $bg-color: $color_middle;
  $wk-colors: "from(#{$color_start})";
  $colors: "#{$color_start}";
  @if $color_middle != none {
    $wk-colors: "#{$wk-colors}, color-stop(#{$percent_middle}, #{$color_middle})";
    $colors: "#{$colors}, #{$color_middle} #{$percent_middle}";
  } @else {
    $bg-color: mix($color_start, $color_stop);
  }
  $wk-colors: "#{$wk-colors}, to(#{$color_stop})";
  $colors: "#{$colors}, #{$color_stop}";
  background-color: $bg-color;
  // TODO: $color_middle leave out
  @if $color_start != $color_stop {
    background-image: -webkit-gradient(linear, $wk_start, $wk_stop, unquote($wk-colors)); // old webkit (Safari <= 5.0, iOS-Safari <= 4.3, Android <= 3.0)
    // TODO may be new -webkit-gradient?
    background-image:       -moz-linear-gradient($start, unquote($colors)); // actual
    background-image:        -ms-linear-gradient($start, unquote($colors)); // IE 10+
    background-image:         -o-linear-gradient($start, unquote($colors)); // Opera 11.10+
    background-image:            linear-gradient($start, unquote($colors)); // future
    @if $support-ie and $pie-url {
      -pie-background: $bg-color linear-gradient($start, unquote($colors)); // IE 6-9
    }
  }
}

@mixin border-gradient($color_start, $color_stop, $is_horizontal: false) {
  $start: top;
  $wk_start: left top;
  $wk_stop: left bottom;
  @if $is_horizontal {
    $start: left;
    $wk_stop: right top;
  } @else {
    $start: top;
    $wk_stop: left bottom;
  }
  border-color: $color_start mix($color_start, $color_stop) $color_stop;
  -webkit-border-image: -webkit-gradient(linear, $wk_start, $wk_stop, from($color_start), to($color_stop)); // old webkit (Safari <= 5.0, iOS-Safari <= 4.3, Android <= 3.0)
  // TODO may be new -webkit-gradient?
  -moz-border-image: -moz-linear-gradient($start, $color_start, $color_stop); // actual
    -o-border-image:  -ms-linear-gradient($start, $color_start, $color_stop); // IE 10+
    -o-border-image:   -o-linear-gradient($start, $color_start, $color_stop); // Opera 11.10+
       border-image:      linear-gradient($start, $color_start, $color_stop); // future
}

@mixin opacity($value: 0.5) {
  opacity: $value;
  $value: round($value * 100);
  @if $value < 100 {
    filter: progid:DXImageTransform.Microsoft.Alpha(opacity=#{$value});
  } @else {
    filter: progid:DXImageTransform.Microsoft.Alpha(enabled=false);
  }
}

@mixin pie-bg($bg) {
  background: $bg;
  @if $pie-url {
    -pie-background: $bg;
  }
}

//  TODO redisign with parsing params, activate IE filter
//    example:
//      @include text-shadow(#000 0 2px 1px);
//    produce:
//      text-shadow: #000 0 2px 1px;
@mixin text-shadow($color, $params: none, $direction: 180, $strength: 1) {
  @if $color == none {
    text-shadow: none;
    //filter: progid:DXImageTransform.Microsoft.Shadow(enabled=false);
  } @else {
    text-shadow: $color $params;
    //filter: progid:DXImageTransform.Microsoft.Shadow(Color=#{$color}, Direction=#{$direction}, strength=#{$strength});
  }
}


//    example:
//      @include ellipsis;
//    produce:
//      overflow: hidden;           // need to work text-overflow
//      -o-text-overflow: ellipsis; // Opera Mini and Opera Mobile
//         text-overflow: ellipsis; // all
@mixin ellipsis($overflow: hidden) {
  @if $overflow != false {
    overflow: $overflow;
  }
  @include vendors(o, text-overflow, ellipsis);
}

//    $param: none || text || all || element
//    example:
//      @include user-select;
//    produce:
//      -webkit-user-select: none;
//      -moz-user-select: none;
//      -ms-user-select: none; // IE 10+
//      -o-user-select: none;
//      user-select: none;
@mixin user-select($param: none) {
  @include vendors(webkit moz ms o, user-select, $param);
}

//  Provide vendorized CSS transition.
//    example:
//      @include transition(all, 0.5s);
//    produce:
//      -webkit-transition: all 0.5s ease; // actual
//         -moz-transition: all 0.5s ease; // FF 8+
//          -ms-transition: all 0.5s ease; // IE 10+
//           -o-transition: all 0.5s ease; // Opera 11.6+
//    without:
//              transition: all 0.5s ease; // future
@mixin transition($what, $time, $method: ease) {
  @include vendors(webkit moz ms o, transition, $what $time $method, false);
}

//  Provide vendorized CSS transform.
//    example:
//      @include transform(scale(1.2, 1.2));
//    produce:
//      -webkit-transform: $params; // actual
//         -moz-transform: $params; // actual
//          -ms-transform: $params; // IE 9+
//           -o-transform: $params; // actual
//    without:
//              transform: $params; // future
@mixin transform($params) {
  @include vendors(webkit moz ms o, transform, $params, false);
}

//  Scale an object along the x and y axis.
//    example:
//      @include scale(1.2);
//    produce:
//      -webkit-transform: scale(1.2, 1.2);
//         -moz-transform: scale(1.2, 1.2);
//          -ms-transform: scale(1.2, 1.2);
//           -o-transform: scale(1.2, 1.2);
@mixin scale($scale-x, $scale-y: $scale-x) {
  @include transform(scale($scale-x, $scale-y));
}

// TODO
//@mixin placeholder($params) {
//  &::-webkit-input-placeholder, &:-moz-placeholder {
//    #{$params};
//  }
//}
//input::-webkit-input-placeholder { color: #a3a3a3 !important;}
//input:-moz-placeholder { color: #a3a3a3 !important; }

